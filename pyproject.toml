[tool.poetry]
name = "interrogatio"
version = "0.0.0"
description = "Prompting library for terminals."
authors = ["Francesco Faraone"]
license = "BSD-3-Clause"
packages = [
    { include = "interrogatio" },
]
readme = "./README.md"
homepage = "https://github.com/ffaraone/interrogatio"
documentation = "https://interrogatio.readthedocs.io/en/latest/"
repository = "https://github.com/ffaraone/interrogatio.git"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Utilities",
    "Topic :: Software Development :: Libraries",
]

[tool.poetry.dependencies]
python = ">=3.8,<4"
prompt-toolkit = ">=3.0.29"
PyYAML = {version = ">=5", optional = true }
validators = "^0.18.2"
pytz = "^2022.1"
tzlocal = "^4.1"

[tool.poetry.extras]
yaml = ["PyYAML"]


[tool.poetry.dev-dependencies]
ipython = "^8.10.0"
pytest = ">=6.1.2,<8"
pytest-cov = ">=2.10.1,<5"
pytest-mock = "^3.3.1"
coverage = {extras = ["toml"], version = ">=5.3,<7"}
ruff = "0.3.*"
Sphinx = "^1.8.5"
sphinx-rtd-theme = "^1.0.0"

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
interrogatio = 'interrogatio.main:main_interrogatio'
dialogus = 'interrogatio.main:main_dialogus'

[tool.pytest.ini_options]
testpaths = "tests"
log_cli = true
addopts = "--cov=interrogatio --cov-report=term-missing:skip-covered --cov-report=html --cov-report=xml"

[tool.coverage.run]
branch = true
relative_files = true

[tool.coverage.report]
omit = [
    "interrogatio/main.py",
    "*/__init__.py",
]

exclude_lines = [
    "pragma: no cover",
    "def __str__",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]


[tool.ruff]
extend-exclude = [".vscode", ".devcontainer"]
output-format = "full"

[tool.ruff.lint]

select = [
    "E",  # w errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade,
    "PT",  # flake8-pytest-style
    "T10",  # flake8-pytest-style
]
ignore = [
    "PT004", # fixture '{name}' does not return anything, add leading underscore
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
]

[tool.ruff.lint.pycodestyle]
max-line-length = 100